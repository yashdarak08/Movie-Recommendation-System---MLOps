name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Deployment environment'
        required: false
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install dev dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r src/requirements.txt
    
    - name: Run linters
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check src/ tests/
        isort --check-only --profile black src/ tests/

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
        pip install pytest pytest-cov
    
    - name: Download test data
      run: |
        mkdir -p data/movielens
        cd data
        bash download_data.sh
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ --cov=src --cov-report=xml
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and tag Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: docker/Dockerfile
        push: false
        load: true
        tags: |
          mlops-movie-rec:latest
          mlops-movie-rec:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm mlops-movie-rec:latest python -c "import torch; print(f'PyTorch version: {torch.__version__}')"

  train_model:
    name: Train Recommendation Model
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
    
    - name: Download data
      run: |
        mkdir -p data/movielens
        cd data
        bash download_data.sh
    
    - name: Set up MLflow tracking server
      run: |
        pip install mlflow
        mlflow server --backend-store-uri sqlite:///mlflow.db --default-artifact-root ./mlruns --host 0.0.0.0 &
        sleep 5  # Wait for MLflow server to start
    
    - name: Train model
      run: |
        python -m src.main --mode train --config configs/train_config.yaml
    
    - name: Run hyperparameter tuning
      run: |
        python -m src.main --mode tune --config configs/tune_config.yaml
    
    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: trained-models
        path: |
          models/
          mlruns/
    
    - name: Evaluate model
      run: |
        python -m src.main --mode inference --config configs/infer_config.yaml

  deploy_dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: train_model
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_env == 'dev'
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download model artifacts
      uses: actions/download-artifact@v3
      with:
        name: trained-models
        path: models/
    
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0
    
    - name: Initialize Terraform
      run: |
        cd infrastructure
        terraform init
    
    - name: Apply Terraform
      run: |
        cd infrastructure
        terraform apply -auto-approve -var="environment=dev"
    
    - name: Deploy to EC2 instance
      run: |
        # Use AWS CLI to deploy application to EC2
        aws ec2 describe-instances --filters "Name=tag:Name,Values=MLOps-MovieRec-Instance" --query "Reservations[].Instances[].InstanceId" --output text > instance_id.txt
        INSTANCE_ID=$(cat instance_id.txt)
        
        # Copy files to EC2 instance
        aws s3 cp models/ s3://mlops-movie-rec-dev/models/ --recursive
        aws s3 cp configs/ s3://mlops-movie-rec-dev/configs/ --recursive
        
        # Execute deployment script on EC2
        aws ssm send-command \
          --instance-ids "$INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=cd /app && aws s3 sync s3://mlops-movie-rec-dev ."
    
    - name: Verify deployment
      run: |
        # Add verification steps

  deploy_prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: train_model
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_env == 'prod'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download model artifacts
      uses: actions/download-artifact@v3
      with:
        name: trained-models
        path: models/
    
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Set up Kubernetes
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubeconfig
      run: |
        aws eks update-kubeconfig --name mlops-movie-rec-cluster --region us-west-2
    
    - name: Push Docker image to ECR
      run: |
        aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
        docker tag mlops-movie-rec:latest ${{ secrets.ECR_REGISTRY }}/mlops-movie-rec:${{ github.sha }}
        docker push ${{ secrets.ECR_REGISTRY }}/mlops-movie-rec:${{ github.sha }}
        docker tag mlops-movie-rec:latest ${{ secrets.ECR_REGISTRY }}/mlops-movie-rec:latest
        docker push ${{ secrets.ECR_REGISTRY }}/mlops-movie-rec:latest
    
    - name: Deploy to Kubernetes
      run: |
        # Update image in deployment
        sed -i "s|image:.*|image: ${{ secrets.ECR_REGISTRY }}/mlops-movie-rec:${{ github.sha }}|g" k8s/deployment.yaml
        
        # Upload model to persistent volume
        kubectl create configmap movie-rec-config --from-file=configs/infer_config.yaml --dry-run=client -o yaml | kubectl apply -f -
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/pvc.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Wait for deployment to complete
        kubectl rollout status deployment/mlops-movie-rec-deployment
    
    - name: Verify deployment
      run: |
        kubectl get pods
        kubectl get services
    
    - name: Configure monitoring
      run: |
        kubectl apply -f monitoring/prometheus.yml
        # Add Grafana dashboard setup